# Photon API (@photon/api)

Hono-based Node.js API server for the Photon/NOK backend.

## Tech Stack

- **Framework**: Hono (fast web framework)
- **Runtime**: Node.js (via @hono/node-server)
- **Database**: PostgreSQL with Drizzle ORM
- **Auth**: better-auth
- **Queue**: Bull (Redis-based)
- **Email**: React Email + Nodemailer
- **Validation**: Zod
- **Payment**: Vipps MobilePay SDK
- **API Docs**: Scalar API Reference + hono-openapi
- **Testing**: Vitest
- **Build**: tsup
- **Dev**: tsx watch

## Directory Structure

```
src/
├── db/
│   ├── schema/       # Drizzle schema definitions
│   └── index.ts      # Database connection
├── lib/
│   ├── auth/         # better-auth configuration
│   ├── cache/        # Caching utilities
│   ├── email/        # Email templates & sending
│   ├── event/        # Event business logic
│   └── vipps/        # Vipps payment integration
├── middleware/       # Hono middleware (auth, validation, etc.)
├── routes/
│   ├── event/        # Event-related endpoints
│   └── ...           # Other route modules
└── index.ts          # App entry point
```

## Commands

- `pnpm dev` - Start dev server with tsx watch
- `pnpm build` - Build with tsup
- `pnpm start` - Run production build
- `pnpm test` - Run Vitest tests
- `pnpm coverage` - Run tests with coverage
- `pnpm typecheck` - Type check without emitting

### Database Commands
- `pnpm db:generate` - Generate Drizzle migrations
- `pnpm db:migrate` - Run migrations
- `pnpm db:push` - Push schema changes directly
- `pnpm db:studio` - Open Drizzle Studio
- `pnpm db:drop` - Drop tables
- `pnpm db:check` - Check migration status

### Auth
- `pnpm auth:migrate` - Generate auth schema from better-auth config

### Email
- `pnpm email` - Start email preview server (port 4001)

## API Architecture

### Routing Pattern
- Use Hono's router for defining endpoints
- Group related routes in `routes/` subdirectories
- Export route handlers and mount in main app

### Authentication
- better-auth library configured in `src/lib/auth/index.ts`
- Auth schema generated to `src/db/schema/auth.ts`
- Use auth middleware from `src/middleware/`

### Database
- Drizzle ORM for type-safe queries
- Schema files in `src/db/schema/`
- Connection pool managed in `src/db/index.ts`

### Validation
- Use Zod schemas for request/response validation
- Integrate with Hono via @hono/standard-validator or hono-openapi

### Background Jobs
- Bull queue for async tasks (email sending, webhooks, etc.)
- Requires Redis connection

### Email
- React Email templates in `src/lib/email/template/`
- Nodemailer for sending
- Preview server available for development

### Payments
- Vipps MobilePay SDK in `src/lib/vipps/`
- Handle payment flows, callbacks, and webhooks

## Code Conventions

1. **Use TypeScript strictly** - extends `@photon/tsconfig/node/bundler`
2. **Hono patterns**:
   - Return responses with `c.json()`, `c.text()`, etc.
   - Use middleware via `app.use()` or route-level
   - Type routes with OpenAPI schemas when possible
   - Use the `route()` util from `~/lib/route` to create API routes
   - Get DB, redis and queue from `c.get("ctx")` instead of importing singleton
3. **Database queries**: Always use Drizzle ORM, no raw SQL
4. **Error handling**: Use Hono's error handler middleware
5. **Validation**: Zod schemas co-located with routes
6. **Tests**: Vitest tests alongside implementation files or in `__tests__/`
7. **Imports**: Prefer using "~/" (points to src) instead of using relative imports, when importing stuff from another top-level directory in src.
8. **Environment variables**: Use the "~/lib/env" to get environment variables with type safety, never via process.env or similar

### Example endpoint

```ts
import { Hono } from "hono";
import { describeRoute, resolver } from "hono-openapi";
import z from "zod";
import { schema } from "~/db";
import { and, eq } from "drizzle-orm";
import { requireAuth } from "../../../middleware/auth";
import { HTTPException } from "hono/http-exception";
import { route } from "~/lib/route"

const deleteRegistrationSchema = z.object({});

const deleteRegistrationSchemaOpenApi = await resolver(
    deleteRegistrationSchema,
).toOpenAPISchema();

export const deleteEventRegistrationRoute = route().get(
    "/:eventId/registration",
    describeRoute({
        tags: ["event"],
        summary: "Unregister from event",
        responses: {
            200: {
                description: "OK",
                content: {
                    "application/json": {
                        schema: deleteRegistrationSchemaOpenApi.schema,
                    },
                },
            },
        },
    }),
    requireAuth,
    async (c) => {
        const { db } = c.get("ctx");
        const [deleted] = await db
            .delete(schema.eventRegistration)
            .where(
                and(
                    eq(schema.eventRegistration.userId, c.get("user").id),
                    eq(
                        schema.eventRegistration.eventId,
                        c.req.param("eventId"),
                    ),
                ),
            )
            .returning();

        if (!deleted) {
            throw new HTTPException(404, { message: "Registration not found" });
        }

        return c.text("OK");
    },
);
```

remember to use openapi schema, and create a new router for each endpoint, then register endpoint in nearest index.ts from the file.

## API Documentation

- Scalar API Reference available via hono-openapi
- Document endpoints with OpenAPI schemas
- Keep docs up-to-date with code changes

## Environment Variables

See `.env.example` at root for required variables:
- Database connection (PostgreSQL)
- Redis connection (for Bull)
- better-auth secrets
- Email SMTP config
- Vipps API credentials
- etc.

## Exports

This package exports:
- `./auth` - Auth client for shared use
- `./db` - Database instance for shared use